name: Deploy Infrastructure

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ingestion_job:
        description: 'Ingestion job to deploy (use job key or "all")'
        default: 'all'
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  compute-matrix:
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.fanout.outputs.include }}
      enabled: ${{ steps.determine.outputs.enabled }}
    steps:
      - id: determine
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            job="${{ github.event.inputs.ingestion_job }}"
            if [ -z "$job" ]; then
              job="all"
            fi
            echo "enabled=true" >> "$GITHUB_OUTPUT"
            echo "job=$job" >> "$GITHUB_OUTPUT"
          elif [ "${{ vars.AUTO_DEPLOY_INFRASTRUCTURE }}" = "true" ]; then
            job="${{ vars.AUTO_DEPLOY_INGESTION_JOB }}"
            if [ -z "$job" ]; then
              job="all"
            fi
            echo "enabled=true" >> "$GITHUB_OUTPUT"
            echo "job=$job" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            echo "job=all" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/checkout@v4
        if: steps.determine.outputs.enabled == 'true'
      - id: fanout
        if: always()
        run: |
          if [ "$ENABLED" = "true" ]; then
            python .github/scripts/render_matrix.py > matrix.json
            echo "include=$(cat matrix.json)" >> "$GITHUB_OUTPUT"
          else
            echo "include=[]" >> "$GITHUB_OUTPUT"
          fi
        env:
          ENABLED: ${{ steps.determine.outputs.enabled }}
          INGESTION_JOB: ${{ steps.determine.outputs.job }}

  deploy:
    needs: compute-matrix
    if: ${{ needs.compute-matrix.outputs.include != '[]' && needs.compute-matrix.outputs.include != '' }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.compute-matrix.outputs.include) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ matrix.region }}
      - name: Deploy CloudFormation stacks
        env:
          STACKS: ${{ toJSON(matrix.stacks) }}
          BRAND: ${{ matrix.brand }}
          JOB: ${{ matrix.job }}
          ENVIRONMENT: prod
          REGION: ${{ matrix.region }}
        run: python .github/scripts/deploy_stacks.py
