AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless pipeline for Growth Reporting Engine (S3 + Athena)

Parameters:
  OutputBucketName:
    Type: String
    Description: "S3 bucket that will store hourly growth reporting files"
  LambdaCodeS3Bucket:
    Type: String
    Description: "S3 bucket containing the Lambda deployment package (zip)"
  LambdaCodeS3Key:
    Type: String
    Description: "S3 key for the Lambda deployment package"
  TripleWhaleSecretArn:
    Type: String
    Default: ""
    Description: "(Optional) ARN of Secrets Manager secret (JSON with TRIPLE_WHALE_* keys)"
  AthenaResultBucket:
    Type: String
    Description: "S3 bucket used by Athena for query results (staging directory)"
  AthenaDatabaseName:
    Type: String
    Default: growth_reporting
    Description: "Glue/Athena database name that catalogs the hourly table"
  AthenaTableName:
    Type: String
    Default: growth_report_hourly
    Description: "Table name created/maintained by the Glue crawler"
  GlueCrawlerName:
    Type: String
    Default: growth-reporting-hourly-crawler
    Description: "Glue crawler name"
  EventScheduleExpression:
    Type: String
    Default: cron(15 * * * ? *)
    Description: "EventBridge schedule for automatic refresh (default: hourly at minute 15)"
  ApiGatewayHttpApiId:
    Type: String
    Default: q20ffpu472
    Description: "Existing API Gateway HTTP API ID to attach routes to"
  ApiGatewayAuthorizerId:
    Type: String
    Default: fnaf8s
    Description: "(Optional) Authorizer ID for secured routes; leave blank for none"

Conditions:
  HasSecret: !Not [!Equals [!Ref TripleWhaleSecretArn, ""]]
  HasAuthorizer: !Not [!Equals [!Ref ApiGatewayAuthorizerId, ""]]


Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaGrowthReportingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucketName}
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucketName}/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AthenaResultBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${AthenaResultBucket}/*
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                Resource: !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/${GlueCrawlerName}

  LambdaSecretAccessPolicy:
    Type: AWS::IAM::Policy
    Condition: HasSecret
    Properties:
      PolicyName: LambdaSecretAccess
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Ref TripleWhaleSecretArn

  DataRefreshFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: growth-reporting-refresh
      Description: Pulls Triple Whale data and writes hourly dataset to S3
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: infra.lambda_handler.lambda_handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 2048
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucketName
          OUTPUT_PREFIX: hourly
          GLUE_CRAWLER_NAME: !Ref GlueCrawlerName
          ATHENA_DATABASE: !Ref AthenaDatabaseName
          ATHENA_TABLE: !Ref AthenaTableName
          ATHENA_RESULTS_BUCKET: !Ref AthenaResultBucket
          TW_SECRET_ARN: !Ref TripleWhaleSecretArn
          OUTPUT_FORMAT: parquet
          PARTITION_BY_HOUR: "false"
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key

  RefreshTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RefreshTriggerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:growth-reporting-refresh

  RefreshTriggerFunction:
    Type: AWS::Lambda::Function
    DependsOn: RefreshTriggerRole
    Properties:
      FunctionName: growth-reporting-refresh-trigger
      Description: Starts the Step Functions execution for growth reporting refresh
      Role: !GetAtt RefreshTriggerRole.Arn
      Handler: infra.refresh_trigger.lambda_handler
      Runtime: python3.11
      Timeout: 60
      MemorySize: 256
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt RefreshStateMachine.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key

  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: GlueCrawlerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucketName}
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucketName}/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AthenaResultBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${AthenaResultBucket}/*

  GrowthGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref AthenaDatabaseName
        Description: Growth reporting hourly data

  GrowthGlueTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref AthenaDatabaseName
      TableInput:
        Name: !Ref AthenaTableName
        TableType: EXTERNAL_TABLE
        Parameters:
          classification: parquet
          parquet.compress: SNAPPY
        StorageDescriptor:
          Columns:
            - Name: timestamp_utc
              Type: timestamp
            - Name: meta_spend
              Type: double
            - Name: google_spend
              Type: double
            - Name: new_customer_orders
              Type: bigint
            - Name: new_customer_sales
              Type: double
            - Name: total_sales
              Type: double
            - Name: total_spend
              Type: double
            - Name: new_customer_cpp
              Type: double
            - Name: new_customer_aov
              Type: double
            - Name: new_customer_roas
              Type: double
            - Name: blended_roas
              Type: double
            - Name: local_datetime
              Type: timestamp
            - Name: local_date
              Type: date
            - Name: local_hour
              Type: string
            - Name: central_datetime
              Type: timestamp
            - Name: central_hour
              Type: string
            - Name: currency
              Type: string
          Location: !Sub s3://${OutputBucketName}/hourly/
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: "1"
          StoredAsSubDirectories: false
        PartitionKeys:
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          - Name: region
            Type: string

  GrowthGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Ref GlueCrawlerName
      Role: !GetAtt GlueCrawlerRole.Arn
      DatabaseName: !Ref AthenaDatabaseName
      Targets:
        S3Targets:
          - Path: !Sub s3://${OutputBucketName}/hourly/
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionInvokePolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt DataRefreshFunction.Arn
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                Resource: !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/${GlueCrawlerName}
              - Effect: Allow
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                Resource:
                  - !Sub arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary
                  - !Sub arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:CreateTable
                  - glue:GetPartitions
                  - glue:CreatePartition
                  - glue:BatchCreatePartition
                Resource:
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${AthenaDatabaseName}
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${AthenaDatabaseName}/${AthenaTableName}
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AthenaResultBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucketName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AthenaResultBucket}/*
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucketName}/*

  RefreshStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: growth-reporting-refresh
      RoleArn: !GetAtt StateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Growth reporting refresh",
          "StartAt": "RunExtraction",
          "States": {
            "RunExtraction": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$",
              "Parameters": {
                "FunctionName": "${DataRefreshFunction.Arn}",
                "Payload.$": "$"
              },
              "Next": "DropAthenaTable"
            },
            "DropAthenaTable": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Catch": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "ResultPath": null,
                  "Next": "EnsureAthenaTable"
                }
              ],
              "Parameters": {
                "QueryString": "DROP TABLE IF EXISTS ${AthenaTableName}",
                "QueryExecutionContext": {
                  "Database": "${AthenaDatabaseName}"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://${AthenaResultBucket}/athena-results/"
                }
              },
              "Next": "EnsureAthenaTable"
            },
            "EnsureAthenaTable": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                "QueryString": "CREATE EXTERNAL TABLE IF NOT EXISTS ${AthenaDatabaseName}.${AthenaTableName} ( timestamp_utc timestamp, meta_spend double, google_spend double, new_customer_orders bigint, new_customer_sales double, total_sales double, total_spend double, new_customer_cpp double, new_customer_aov double, new_customer_roas double, blended_roas double, local_datetime timestamp, local_date date, local_hour string, central_datetime timestamp, central_hour string, currency string ) PARTITIONED BY ( year string, month string, day string, region string ) STORED AS PARQUET LOCATION 's3://${OutputBucketName}/hourly/' TBLPROPERTIES ('parquet.compress'='SNAPPY')",
                "QueryExecutionContext": {
                  "Database": "${AthenaDatabaseName}"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://${AthenaResultBucket}/athena-results/"
                }
              },
              "Next": "RepairPartitions"
            },
            "RepairPartitions": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                "QueryString": "MSCK REPAIR TABLE ${AthenaTableName}",
                "QueryExecutionContext": {
                  "Database": "${AthenaDatabaseName}"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://${AthenaResultBucket}/athena-results/"
                }
              },
              "Next": "StartGlueCrawler"
            },
            "StartGlueCrawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
              "Parameters": {
                "Name": "${GlueCrawlerName}"
              },
              "End": true
            }
          }
        }

  LambdaInvokePermissionForStepFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataRefreshFunction
      Action: lambda:InvokeFunction
      Principal: states.amazonaws.com
      SourceArn: !GetAtt RefreshStateMachine.Arn

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: growth-reporting-refresh-schedule
      ScheduleExpression: !Ref EventScheduleExpression
      State: ENABLED
      Targets:
        - Id: GrowthRefreshStateMachine
          Arn: !GetAtt RefreshStateMachine.Arn
          RoleArn: !GetAtt EventBridgeInvokeRole.Arn


  ApiTriggerIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayHttpApiId
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt RefreshTriggerFunction.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  ApiTriggerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayHttpApiId
      RouteKey: POST /growth-reporting/refresh
      Target: !Join ['', ['integrations/', !Ref ApiTriggerIntegration]]
      AuthorizationType: !If [HasAuthorizer, "CUSTOM", "NONE"]
      AuthorizerId: !If [HasAuthorizer, !Ref ApiGatewayAuthorizerId, !Ref AWS::NoValue]

  ApiTriggerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RefreshTriggerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHttpApiId}/*/POST/growth-reporting/refresh

  EventBridgeInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowEventsToStartStateMachine
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt RefreshStateMachine.Arn

Outputs:
  S3BucketName:
    Value: !Ref OutputBucketName
    Description: Bucket containing hourly growth reporting files
  StateMachineArn:
    Value: !GetAtt RefreshStateMachine.Arn
    Description: ARN of the refresh state machine
  GlueDatabaseName:
    Value: !Ref AthenaDatabaseName
  GlueCrawlerName:
    Value: !Ref GlueCrawlerName
